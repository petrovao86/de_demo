services:
  postgresql:
    image: postgres:17.4-alpine3.21
    environment:
      POSTGRES_USER: "dagster"
      POSTGRES_PASSWORD: "dagster"
      POSTGRES_DB: "dagster"
    volumes:
      - postgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d data"]
      interval: 10s
      timeout: 8s
      retries: 5


  dagster_webserver:
    image: de-demo:latest
    build:
      context: ..
      dockerfile: ./docker/de-demo.dockerfile
    volumes:
      - ../dagster.yaml:/app/dagster.yaml
    entrypoint:
      - dagster-webserver
      - -h
      - "0.0.0.0"
      - -p
      - "3000"
      - -m
      - "de_demo.dagster.definitions"
      - --empty-workspace
    ports:
      - "127.0.0.1:13002:3000"
    restart: "always"
    environment:
      DAGSTER_HOME: "/app"
      DAGSTER_POSTGRES_HOST: "postgresql"
      DAGSTER_POSTGRES_USER: "dagster"
      DAGSTER_POSTGRES_PASSWORD: "dagster"
      DAGSTER_POSTGRES_DB: "dagster"
    depends_on:
      postgresql:
        condition: service_healthy
    logging:
      options:
        max-size: 50m
        max-file: 10

  dagster_daemon:
    image: de-demo:latest
    build:
      context: ..
      dockerfile: ./docker/de-demo.dockerfile
    volumes:
      - ../dagster.yaml:/app/dagster.yaml
    entrypoint:
      - dagster-daemon
      - run
      - -m
      - "de_demo.dagster.definitions"
      - --empty-workspace
    restart: on-failure
    environment:
      DAGSTER_HOME: "/app"
      DAGSTER_POSTGRES_HOST: "postgresql"
      DAGSTER_POSTGRES_USER: "dagster"
      DAGSTER_POSTGRES_PASSWORD: "dagster"
      DAGSTER_POSTGRES_DB: "dagster"
    depends_on:
      postgresql:
        condition: service_healthy

volumes:
  postgres:
